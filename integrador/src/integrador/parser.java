
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package integrador;

import java_cup.runtime.*;
import javax.swing.JTextArea;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}
 public JTextArea textoArea2;
 public TablaSimbolos tabla;
  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s, JTextArea t, TablaSimbolos ts) {super(s);this.textoArea2 = t; this.tabla = ts;}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\005\003\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\004\005\000\002\015\005\000\002" +
    "\015\006\000\002\016\007\000\002\016\007\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\007\007" +
    "\000\002\010\007\000\002\010\013\000\002\020\003\000" +
    "\002\020\007\000\002\027\003\000\002\027\003\000\002" +
    "\021\007\000\002\021\003\000\002\021\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\011\005\000" +
    "\002\012\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\013\004\000\002\014\012\000\002\026\003\000\002" +
    "\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\014\006\001\002\000\004\012\035\001" +
    "\002\000\004\002\034\001\002\000\004\025\010\001\002" +
    "\000\004\002\000\001\002\000\004\032\014\001\002\000" +
    "\006\015\013\025\012\001\002\000\004\032\014\001\002" +
    "\000\004\012\ufff7\001\002\000\006\005\017\026\020\001" +
    "\002\000\004\026\016\001\002\000\006\015\ufff5\025\ufff5" +
    "\001\002\000\004\032\014\001\002\000\004\004\021\001" +
    "\002\000\004\025\022\001\002\000\010\016\026\017\023" +
    "\020\025\001\002\000\006\005\ufff0\026\ufff0\001\002\000" +
    "\006\005\ufff4\026\ufff4\001\002\000\006\005\ufff2\026\ufff2" +
    "\001\002\000\006\005\ufff1\026\ufff1\001\002\000\004\005" +
    "\030\001\002\000\010\016\026\017\023\020\025\001\002" +
    "\000\006\005\ufff3\026\ufff3\001\002\000\004\026\033\001" +
    "\002\000\006\015\ufff6\025\ufff6\001\002\000\004\002\001" +
    "\001\002\000\012\006\036\007\041\011\044\032\043\001" +
    "\002\000\010\023\120\036\115\037\116\001\002\000\016" +
    "\006\ufffe\007\ufffe\011\ufffe\013\ufffe\030\ufffe\032\ufffe\001" +
    "\002\000\016\006\ufffc\007\ufffc\011\ufffc\013\ufffc\030\ufffc" +
    "\032\ufffc\001\002\000\010\023\120\036\115\037\116\001" +
    "\002\000\016\006\ufffa\007\ufffa\011\ufffa\013\ufffa\030\ufffa" +
    "\032\ufffa\001\002\000\004\004\054\001\002\000\004\035" +
    "\053\001\002\000\016\006\ufffb\007\ufffb\011\ufffb\013\ufffb" +
    "\030\ufffb\032\ufffb\001\002\000\016\006\ufff9\007\ufff9\011" +
    "\ufff9\013\ufff9\030\ufff9\032\ufff9\001\002\000\014\006\036" +
    "\007\041\011\044\013\052\032\043\001\002\000\016\006" +
    "\ufff8\007\ufff8\011\ufff8\013\ufff8\030\ufff8\032\ufff8\001\002" +
    "\000\016\006\ufffd\007\ufffd\011\ufffd\013\ufffd\030\ufffd\032" +
    "\ufffd\001\002\000\004\002\uffff\001\002\000\016\006\uffd1" +
    "\007\uffd1\011\uffd1\013\uffd1\030\uffd1\032\uffd1\001\002\000" +
    "\016\023\062\031\055\032\064\033\063\034\067\035\057" +
    "\001\002\000\004\023\102\001\002\000\050\005\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\024\uffdb\026\uffdb\030\uffdb" +
    "\032\uffdb\040\uffdb\041\uffdb\042\076\043\075\044\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000\016" +
    "\006\uffde\007\uffde\011\uffde\013\uffde\030\uffde\032\uffde\001" +
    "\002\000\050\005\uffd6\006\uffd6\007\uffd6\011\uffd6\013\uffd6" +
    "\024\uffd6\026\uffd6\030\uffd6\032\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\022\006\uffdf\007\uffdf\011\uffdf\013" +
    "\uffdf\030\uffdf\032\uffdf\040\072\041\071\001\002\000\014" +
    "\023\062\031\055\032\064\033\063\034\067\001\002\000" +
    "\050\005\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3\024\uffd3" +
    "\026\uffd3\030\uffd3\032\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\001\002\000\050\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013" +
    "\uffd7\024\uffd7\026\uffd7\030\uffd7\032\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\001\002\000\050\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\013\uffd8\024\uffd8\026\uffd8\030\uffd8\032\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\001\002\000\050\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\013\uffd4\024\uffd4\026\uffd4\030\uffd4" +
    "\032\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000\050" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\024\uffd2\026" +
    "\uffd2\030\uffd2\032\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\001" +
    "\002\000\010\024\073\040\072\041\071\001\002\000\014" +
    "\023\062\031\055\032\064\033\063\034\067\001\002\000" +
    "\014\023\062\031\055\032\064\033\063\034\067\001\002" +
    "\000\050\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\024" +
    "\uffd5\026\uffd5\030\uffd5\032\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\001\002\000\050\005\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\013\uffdd\024\uffdd\026\uffdd\030\uffdd\032\uffdd\040\uffdd\041" +
    "\uffdd\042\076\043\075\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\001\002\000\014\023\062\031\055\032" +
    "\064\033\063\034\067\001\002\000\014\023\062\031\055" +
    "\032\064\033\063\034\067\001\002\000\050\005\uffd9\006" +
    "\uffd9\007\uffd9\011\uffd9\013\uffd9\024\uffd9\026\uffd9\030\uffd9" +
    "\032\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\001\002\000\050" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\013\uffda\024\uffda\026" +
    "\uffda\030\uffda\032\uffda\040\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\001" +
    "\002\000\050\005\uffdc\006\uffdc\007\uffdc\011\uffdc\013\uffdc" +
    "\024\uffdc\026\uffdc\030\uffdc\032\uffdc\040\uffdc\041\uffdc\042" +
    "\076\043\075\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\001\002\000\014\023\062\031\055\032\064\033" +
    "\063\034\067\001\002\000\010\005\104\040\072\041\071" +
    "\001\002\000\004\025\105\001\002\000\014\023\062\031" +
    "\055\032\064\033\063\034\067\001\002\000\006\005\110" +
    "\026\111\001\002\000\012\005\uffcf\026\uffcf\040\072\041" +
    "\071\001\002\000\014\023\062\031\055\032\064\033\063" +
    "\034\067\001\002\000\004\024\112\001\002\000\050\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\024\uffd0\026\uffd0" +
    "\030\uffd0\032\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\012\005\uffce\026\uffce\040\072\041\071\001\002\000" +
    "\004\027\144\001\002\000\012\021\uffe6\022\uffe6\024\uffe6" +
    "\027\uffe6\001\002\000\012\021\uffe7\022\uffe7\024\uffe7\027" +
    "\uffe7\001\002\000\004\027\uffec\001\002\000\020\023\122" +
    "\031\055\032\064\033\063\034\067\036\115\037\116\001" +
    "\002\000\022\040\072\041\071\044\133\045\135\046\140" +
    "\047\136\050\134\051\137\001\002\000\014\023\062\031" +
    "\055\032\064\033\063\034\067\001\002\000\006\021\124" +
    "\022\126\001\002\000\010\023\uffea\036\uffea\037\uffea\001" +
    "\002\000\010\023\130\036\115\037\116\001\002\000\010" +
    "\023\uffe9\036\uffe9\037\uffe9\001\002\000\004\024\131\001" +
    "\002\000\014\023\062\031\055\032\064\033\063\034\067" +
    "\001\002\000\004\027\uffeb\001\002\000\024\024\073\040" +
    "\072\041\071\044\133\045\135\046\140\047\136\050\134" +
    "\051\137\001\002\000\014\023\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\001\002\000\014\023\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\001\002\000\014\023\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\001\002\000\014\023\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\001\002\000\014\023\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002\000\014\023\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\001\002\000\014\023" +
    "\062\031\055\032\064\033\063\034\067\001\002\000\010" +
    "\024\143\040\072\041\071\001\002\000\012\021\uffe8\022" +
    "\uffe8\024\uffe8\027\uffe8\001\002\000\012\006\036\007\041" +
    "\011\044\032\043\001\002\000\014\006\036\007\041\011" +
    "\044\030\146\032\043\001\002\000\020\006\uffee\007\uffee" +
    "\010\147\011\uffee\013\uffee\030\uffee\032\uffee\001\002\000" +
    "\004\027\150\001\002\000\012\006\036\007\041\011\044" +
    "\032\043\001\002\000\014\006\036\007\041\011\044\030" +
    "\152\032\043\001\002\000\016\006\uffed\007\uffed\011\uffed" +
    "\013\uffed\030\uffed\032\uffed\001\002\000\004\027\154\001" +
    "\002\000\012\006\036\007\041\011\044\032\043\001\002" +
    "\000\014\006\036\007\041\011\044\030\156\032\043\001" +
    "\002\000\016\006\uffef\007\uffef\011\uffef\013\uffef\030\uffef" +
    "\032\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\002\004\003\006\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\004\016\031\001\001\000\002\001" +
    "\001\000\004\016\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\046\006\036" +
    "\007\037\010\044\011\041\012\045\013\047\001\001\000" +
    "\006\020\152\021\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\113\021\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\050\007\037\010\044\011" +
    "\041\012\045\013\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\065\022\060\023\055\024\064\025\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\065\022\067\023\055" +
    "\024\064\025\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\065\023\100\024\064\025" +
    "\057\001\001\000\012\014\065\023\073\024\064\025\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\065\024\077\025\057\001\001\000\010\014\065\024\076" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\065\022\102\023\055\024\064" +
    "\025\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\065\022\106\023\055\024\064\025\057\026\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\065\022\112\023\055\024\064\025\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\065\021\122\022\120\023\055\024\064\025" +
    "\057\001\001\000\004\030\140\001\001\000\014\014\065" +
    "\022\131\023\055\024\064\025\057\001\001\000\004\027" +
    "\124\001\001\000\002\001\001\000\004\021\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\065\022" +
    "\120\023\055\024\064\025\057\001\001\000\002\001\001" +
    "\000\004\030\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\065\022\141\023\055\024" +
    "\064\025\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\144\006\036\007\037\010\044\011\041\012" +
    "\045\013\047\001\001\000\016\006\050\007\037\010\044" +
    "\011\041\012\045\013\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\150\006\036\007\037\010\044" +
    "\011\041\012\045\013\047\001\001\000\016\006\050\007" +
    "\037\010\044\011\041\012\045\013\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\154\006\036\007" +
    "\037\010\044\011\041\012\045\013\047\001\001\000\016" +
    "\006\050\007\037\010\044\011\041\012\045\013\047\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en linea "+(s.right+1)+" columna "+s.left+". "+s+" no reconocido. Valor "+s.value);
        JOptionPane.showMessageDialog(null, "Error en linea "+(s.right+1)+" columna "+s.left+". \n"+s+" no reconocido. Valor "+s.value, "ERROR DE SINTAXIS", JOptionPane.ERROR_MESSAGE);
    }

    ArrayList<String> List_ID = new ArrayList<String>();
    ArrayList<String> List_tipos = new ArrayList<String>();

    public void guardarTipo(String id, String tipo){
        //La forma en que guardamos las variables y sus tipos hace que queden en orden ambas listas, ya que la recursividad es de adentro hacia afuera
        List_ID.add(0,id); //Guarda a la izquierda
        List_tipos.add(tipo); //Guarda a la derecha
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prgS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prgS ::= prg 
            {
              Object RESULT =null;
		 textoArea2.append("[Regla 0] Programa, llegando al simbolo start\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prgS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prg ::= declaraciones BEGIN_PROGRAM sentencias END_PROGRAM 
            {
              Object RESULT =null;
		 textoArea2.append("[Regla 1] declaraciones BEGIN senencias END\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prg",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 2] sentencia\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 3] sentencias sentencia\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= rwhile 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 4] while\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= rif 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 5] if\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= asignacion_s 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 6] asignacion_s\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= asignacion_st 
            {
              Object RESULT =null;
		textoArea2.append("[Regla y] asignacion_st\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= rprint 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 7] print\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones ::= DECLARE list_declaraciones END_DECLARE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		textoArea2.append("[Regla 9] DECLARE list_declaraciones END_DECLARE\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaraciones ::= CORCHETE_ABRIR dec CORCHETE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 10] [ dec ]\n");tabla.actualizarTipo(List_ID, List_tipos); List_ID.clear();List_tipos.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaraciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_declaraciones ::= list_declaraciones CORCHETE_ABRIR dec CORCHETE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 11] list_declaraciones [ dec ]\n"); tabla.actualizarTipo(List_ID, List_tipos); List_ID.clear();List_tipos.clear();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaraciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec ::= ID CORCHETE_CERRAR ASIGN CORCHETE_ABRIR tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 12]  ID]:=[tipo, ID valor = "+id+" Tipo = "+tp+"\n");guardarTipo(String.valueOf(id),String.valueOf(tp));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec ::= ID COMA dec COMA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 13] ID, dec ,tipo, ID valor = "+id+" Tipo = "+tp+"\n"); guardarTipo(String.valueOf(id),String.valueOf(tp));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 13] FLOAT\n");RESULT = tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= INT 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 14] INT\n");RESULT = tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= STRING 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 15] STRING\n"); RESULT = tp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rwhile ::= WHILE list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 16] WHILE list_condicion {sentencias}\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rwhile",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rif ::= IF list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 17] IF list_condicion {sentencias}\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rif",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rif ::= IF list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR ELSE LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 18] IF list_condicion {sentencias}ELSE{sentencias}\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rif",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_condicion ::= condicion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 19] condicion\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_condicion ::= PARENTESIS_ABRIR condicion op_log condicion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 20] (condicion op_log condicion)\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_log ::= AND 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 21] AND\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_log",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_log ::= OR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 22] OR\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_log",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= PARENTESIS_ABRIR expresion op_comp expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 23] (expresion op_comp expresion)\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= FALSE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 24] FALSE\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= TRUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 25] TRUE\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_comp ::= MAYOR_QUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 26] >\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_comp ::= MENOR_QUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 27] <\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_comp ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 28] >=\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_comp ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 29] <=\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_comp ::= DISTINTO 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 30] <>\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_comp ::= COMPARAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 31] ==\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_comp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion_s ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		textoArea2.append("[Regla 32] ID := expresion, Valor ID = "+id+"\n"); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion_st ::= ID ASIGN CONST_STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		textoArea2.append("[Regla w] ID := CONST_STRING\n"); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_st",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 33] expresion + termino\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 34] expresion - termino\n "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 35] termino \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino MULTIPLICAR factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 36] termino * factor \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 37] temrino / factor\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 38] factor \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 39] ID, Valor ID = "+id+"\n"); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= constante 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 40] constante \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= PARENTESIS_ABRIR expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 42] (expresion) \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= riguales 
            {
              Object RESULT =null;
		textoArea2.append("[Regla x] iguales \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 43] CONST_INT \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constante ::= CONST_REAL 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 44] CONST_REAL \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rprint ::= PRINT CONST_STRING 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 45] PRINT CONST_STRING \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rprint",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // riguales ::= IGUALES_FUNC PARENTESIS_ABRIR expresion COMA CORCHETE_ABRIR list_exp CORCHETE_CERRAR PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 46] IGUALES(expresion, listas_expresion) \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("riguales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_exp ::= expresion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 47] expresion \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_exp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_exp ::= list_exp COMA expresion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 48] list_exp, expresion \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_exp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
