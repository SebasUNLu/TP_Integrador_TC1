
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package integrador;

import java_cup.runtime.*;
import javax.swing.JTextArea;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}
 	public JTextArea textoArea2;
  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s, JTextArea t) {super(s); textoArea2 = t;}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\005\003\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\004\005\000\002\014\003\000\002" +
    "\014\004\000\002\015\005\000\002\016\007\000\002\016" +
    "\007\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\007\007\000\002\010\007\000\002\010\013\000" +
    "\002\020\003\000\002\020\007\000\002\020\007\000\002" +
    "\021\007\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\011\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\022\003" +
    "\000\002\022\003\000\002\012\004\000\002\013\010\000" +
    "\002\027\005\000\002\027\007\000\002\030\003\000\002" +
    "\030\005\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\020\006\001\002\000\004\016\034\001" +
    "\002\000\004\002\033\001\002\000\004\034\010\001\002" +
    "\000\004\002\000\001\002\000\004\041\015\001\002\000" +
    "\006\021\013\034\010\001\002\000\006\021\ufff6\034\ufff6" +
    "\001\002\000\004\016\ufff7\001\002\000\006\021\ufff5\034" +
    "\ufff5\001\002\000\006\006\020\035\021\001\002\000\004" +
    "\035\017\001\002\000\006\021\ufff4\034\ufff4\001\002\000" +
    "\004\041\015\001\002\000\004\004\022\001\002\000\004" +
    "\034\023\001\002\000\010\023\027\024\024\025\026\001" +
    "\002\000\006\006\uffef\035\uffef\001\002\000\006\006\ufff3" +
    "\035\ufff3\001\002\000\006\006\ufff1\035\ufff1\001\002\000" +
    "\006\006\ufff0\035\ufff0\001\002\000\004\006\031\001\002" +
    "\000\010\023\027\024\024\025\026\001\002\000\006\006" +
    "\ufff2\035\ufff2\001\002\000\004\002\001\001\002\000\014" +
    "\012\037\013\044\015\047\040\040\041\046\001\002\000" +
    "\020\012\ufffb\013\ufffb\015\ufffb\017\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\001\002\000\020\012\ufff9\013\ufff9\015\ufff9\017" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\012\032\104" +
    "\040\040\045\100\046\101\001\002\000\004\032\151\001" +
    "\002\000\020\012\ufffe\013\ufffe\015\ufffe\017\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\001\002\000\020\012\ufff8\013\ufff8\015" +
    "\ufff8\017\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\020" +
    "\012\ufffc\013\ufffc\015\ufffc\017\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\001\002\000\012\032\104\040\040\045\100\046\101" +
    "\001\002\000\020\012\ufffa\013\ufffa\015\ufffa\017\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\001\002\000\004\004\054\001\002" +
    "\000\004\044\053\001\002\000\016\012\037\013\044\015" +
    "\047\017\052\040\040\041\046\001\002\000\020\012\ufffd" +
    "\013\ufffd\015\ufffd\017\ufffd\037\ufffd\040\ufffd\041\ufffd\001" +
    "\002\000\004\002\uffff\001\002\000\020\012\uffd3\013\uffd3" +
    "\015\uffd3\017\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002\000" +
    "\012\032\064\041\055\042\060\043\057\001\002\000\036" +
    "\006\uffd8\012\uffd8\013\uffd8\015\uffd8\017\uffd8\033\uffd8\035" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\036\006\uffd9\012\uffd9\013\uffd9\015" +
    "\uffd9\017\uffd9\033\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\052\006" +
    "\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\033\uffcc\035\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\001\002\000\052\006\uffcd\012\uffcd\013\uffcd\015\uffcd\017" +
    "\uffcd\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\001\002\000\036\006\uffd7\012\uffd7" +
    "\013\uffd7\015\uffd7\017\uffd7\033\uffd7\035\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002" +
    "\000\036\006\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc\033" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\050\uffdc\051\uffdc" +
    "\052\073\053\072\001\002\000\024\012\uffdf\013\uffdf\015" +
    "\uffdf\017\uffdf\037\uffdf\040\uffdf\041\uffdf\050\067\051\066" +
    "\001\002\000\012\032\064\041\055\042\060\043\057\001" +
    "\002\000\010\033\070\050\067\051\066\001\002\000\012" +
    "\032\064\041\055\042\060\043\057\001\002\000\012\032" +
    "\064\041\055\042\060\043\057\001\002\000\036\006\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\017\uffd6\033\uffd6\035\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\036\006\uffde\012\uffde\013\uffde\015\uffde\017" +
    "\uffde\033\uffde\035\uffde\037\uffde\040\uffde\041\uffde\050\uffde" +
    "\051\uffde\052\073\053\072\001\002\000\012\032\064\041" +
    "\055\042\060\043\057\001\002\000\012\032\064\041\055" +
    "\042\060\043\057\001\002\000\036\006\uffda\012\uffda\013" +
    "\uffda\015\uffda\017\uffda\033\uffda\035\uffda\037\uffda\040\uffda" +
    "\041\uffda\050\uffda\051\uffda\052\uffda\053\uffda\001\002\000" +
    "\036\006\uffdb\012\uffdb\013\uffdb\015\uffdb\017\uffdb\033\uffdb" +
    "\035\uffdb\037\uffdb\040\uffdb\041\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\001\002\000\036\006\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\017\uffdd\033\uffdd\035\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\050\uffdd\051\uffdd\052\073\053\072\001\002\000\004" +
    "\036\142\001\002\000\012\027\uffe1\030\uffe1\033\uffe1\036" +
    "\uffe1\001\002\000\012\027\uffe0\030\uffe0\033\uffe0\036\uffe0" +
    "\001\002\000\010\027\uffeb\030\uffeb\036\uffeb\001\002\000" +
    "\012\027\uffe2\030\uffe2\033\uffe2\036\uffe2\001\002\000\020" +
    "\032\104\040\040\041\110\042\060\043\057\045\100\046" +
    "\101\001\002\000\016\054\122\055\123\056\121\057\120" +
    "\060\125\061\124\001\002\000\006\027\111\030\112\001" +
    "\002\000\020\033\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\001\002\000\020\033\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\012" +
    "\032\114\040\040\045\100\046\101\001\002\000\012\032" +
    "\114\040\040\045\100\046\101\001\002\000\004\033\115" +
    "\001\002\000\010\041\110\042\060\043\057\001\002\000" +
    "\010\027\uffe9\030\uffe9\036\uffe9\001\002\000\004\033\117" +
    "\001\002\000\010\027\uffea\030\uffea\036\uffea\001\002\000" +
    "\010\041\110\042\060\043\057\001\002\000\010\041\110" +
    "\042\060\043\057\001\002\000\010\041\110\042\060\043" +
    "\057\001\002\000\010\041\110\042\060\043\057\001\002" +
    "\000\010\041\110\042\060\043\057\001\002\000\010\041" +
    "\110\042\060\043\057\001\002\000\004\033\127\001\002" +
    "\000\012\027\uffe4\030\uffe4\033\uffe4\036\uffe4\001\002\000" +
    "\004\033\131\001\002\000\012\027\uffe3\030\uffe3\033\uffe3" +
    "\036\uffe3\001\002\000\004\033\133\001\002\000\012\027" +
    "\uffe8\030\uffe8\033\uffe8\036\uffe8\001\002\000\004\033\135" +
    "\001\002\000\012\027\uffe7\030\uffe7\033\uffe7\036\uffe7\001" +
    "\002\000\004\033\137\001\002\000\012\027\uffe5\030\uffe5" +
    "\033\uffe5\036\uffe5\001\002\000\004\033\141\001\002\000" +
    "\012\027\uffe6\030\uffe6\033\uffe6\036\uffe6\001\002\000\014" +
    "\012\037\013\044\015\047\040\040\041\046\001\002\000" +
    "\016\012\037\013\044\015\047\037\144\040\040\041\046" +
    "\001\002\000\022\012\uffed\013\uffed\014\145\015\uffed\017" +
    "\uffed\037\uffed\040\uffed\041\uffed\001\002\000\004\036\146" +
    "\001\002\000\014\012\037\013\044\015\047\040\040\041" +
    "\046\001\002\000\016\012\037\013\044\015\047\037\150" +
    "\040\040\041\046\001\002\000\020\012\uffec\013\uffec\015" +
    "\uffec\017\uffec\037\uffec\040\uffec\041\uffec\001\002\000\012" +
    "\032\064\041\055\042\060\043\057\001\002\000\010\006" +
    "\153\050\067\051\066\001\002\000\004\034\154\001\002" +
    "\000\012\032\064\041\055\042\060\043\057\001\002\000" +
    "\006\006\156\033\157\001\002\000\004\034\160\001\002" +
    "\000\030\012\uffd2\013\uffd2\015\uffd2\017\uffd2\027\uffd2\030" +
    "\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002" +
    "\000\012\032\064\041\055\042\060\043\057\001\002\000" +
    "\006\006\163\035\164\001\002\000\012\006\uffcf\035\uffcf" +
    "\050\067\051\066\001\002\000\012\032\064\041\055\042" +
    "\060\043\057\001\002\000\006\006\uffd0\033\uffd0\001\002" +
    "\000\012\006\uffce\035\uffce\050\067\051\066\001\002\000" +
    "\006\006\163\035\167\001\002\000\006\006\uffd1\033\uffd1" +
    "\001\002\000\004\036\171\001\002\000\014\012\037\013" +
    "\044\015\047\040\040\041\046\001\002\000\016\012\037" +
    "\013\044\015\047\037\173\040\040\041\046\001\002\000" +
    "\020\012\uffee\013\uffee\015\uffee\017\uffee\037\uffee\040\uffee" +
    "\041\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\004\003\006\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\010\015\011" +
    "\001\001\000\002\001\001\000\004\016\015\001\001\000" +
    "\004\015\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\047\006\040\007\042" +
    "\010\034\011\044\012\035\013\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\102\020\167\021\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\102\020\076\021\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\050\007\042\010\034\011\044\012\035" +
    "\013\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\062\024\061\025\055\026\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\064\024\061\025\055\026" +
    "\060\001\001\000\002\001\001\000\010\024\075\025\055" +
    "\026\060\001\001\000\010\024\070\025\055\026\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\074" +
    "\026\060\001\001\000\006\025\073\026\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\102\020\105\021\101" +
    "\022\104\026\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\102" +
    "\021\115\001\001\000\006\013\102\021\112\001\001\000" +
    "\002\001\001\000\006\022\104\026\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\137\026\106\001\001\000\006\022\135\026\106\001\001" +
    "\000\006\022\133\026\106\001\001\000\006\022\131\026" +
    "\106\001\001\000\006\022\127\026\106\001\001\000\006" +
    "\022\125\026\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\142\006\040\007\042\010\034\011" +
    "\044\012\035\013\041\001\001\000\016\006\050\007\042" +
    "\010\034\011\044\012\035\013\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\146\006\040\007\042" +
    "\010\034\011\044\012\035\013\041\001\001\000\016\006" +
    "\050\007\042\010\034\011\044\012\035\013\041\001\001" +
    "\000\002\001\001\000\012\023\151\024\061\025\055\026" +
    "\060\001\001\000\002\001\001\000\004\027\154\001\001" +
    "\000\014\023\161\024\061\025\055\026\060\030\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\161\024\061\025\055\026\060\030\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\164" +
    "\024\061\025\055\026\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\171\006\040\007\042\010\034\011" +
    "\044\012\035\013\041\001\001\000\016\006\050\007\042" +
    "\010\034\011\044\012\035\013\041\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prgS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prgS ::= prg 
            {
              Object RESULT =null;
		 textoArea2.append("[Regla 0] Programa, llegando al simbolo start"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prgS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prg ::= declaraciones BEGIN_PROGRAM sentencias END_PROGRAM 
            {
              Object RESULT =null;
		 textoArea2.append("[Regla 1] declaraciones BEGIN senencias END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prg",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 2] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 3] sentencias sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= while 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 4] while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= if 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 5] if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= asignacion_s 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 6] asignacion_s"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= print 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 7] print"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= iguales 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 8] iguales"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones ::= DECLARE list_declaraciones END_DECLARE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 9] DECLARE list_declaraciones END_DECLARE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 10] declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaraciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 11] list_declaraciones declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declaraciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= CORCHETE_ABRIR dec CORCHETE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 12] [ dec ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec ::= ID CORCHETE_CERRAR ASIGN CORCHETE_ABRIR tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		textoArea2.append("[Regla 13]  ID]:=[tipo, ID valor = "+id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec ::= ID COMA dec COMA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		textoArea2.append("[Regla 14] ID, dec ,tipo, ID valor = "+id); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 15] FLOAT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= INT 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 16] INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= STRING 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 17] STRING"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // while ::= WHILE list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 18] WHILE list_condicion {sentencias}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if ::= IF list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 19] IF list_condicion {sentencias}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if ::= IF list_condicion LLAVE_ABRIR sentencias LLAVE_CERRAR ELSE LLAVE_ABRIR sentencias LLAVE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 20] IF list_condicion {sentencias}ELSE{sentencias}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_condicion ::= condicion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 21] condicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_condicion ::= PARENTESIS_ABRIR list_condicion AND condicion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 22] (list_condicion AND condicion)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_condicion ::= PARENTESIS_ABRIR list_condicion OR condicion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 23] (list_condicion OR condicion)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion ::= PARENTESIS_ABRIR argumento MENOR_QUE argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 24] (argumento < argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= PARENTESIS_ABRIR argumento MAYOR_QUE argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 25] (argumento > argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= PARENTESIS_ABRIR argumento MENOR_IGUAL_QUE argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 26] (argumento <= argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= PARENTESIS_ABRIR argumento MAYOR_IGUAL_QUE argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 27] (argumento >= argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= PARENTESIS_ABRIR argumento COMPARAR argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 28] (argumento == argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= PARENTESIS_ABRIR argumento DISTINTO argumento PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 29] (argumento <> argumento) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= iguales 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 30] iguales "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= TRUE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 31] TRUE "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= FALSE 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 32] FALSE "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion_s ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		textoArea2.append("[Regla 33] ID := expresion, Valor ID = "+id); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 34] expresion + termino "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 35] expresion - termino "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= termino 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 36] termino "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= termino MULTIPLICAR factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 37] termino * factor "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 38] temrino / factor "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= factor 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 39] factor "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 40] ID, Valor ID = "+id); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= constante 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 41] constante "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= PARENTESIS_ABRIR expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 42] (expresion) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // argumento ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		textoArea2.append("[Regla 43] ID, ID valor = "+id); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // argumento ::= constante 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 44] constante "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // print ::= PRINT CONST_STRING 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 45] PRINT CONST_STRING "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // iguales ::= IGUALES_FUNC PARENTESIS_ABRIR expresion COMA listas_expresion PARENTESIS_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 46] IGUALES(expresion, listas_expresion) "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iguales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listas_expresion ::= CORCHETE_ABRIR list_exp CORCHETE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 47] [list_exp] "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listas_expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listas_expresion ::= listas_expresion COMA CORCHETE_ABRIR list_exp CORCHETE_CERRAR 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 48] listas_expresion,[list_exp] "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listas_expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_exp ::= expresion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 49] expresion "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_exp ::= list_exp COMA expresion 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 50] list_exp, expresion "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 51] CONST_INT "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constante ::= CONST_REAL 
            {
              Object RESULT =null;
		textoArea2.append("[Regla 52] CONST_REAL "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
